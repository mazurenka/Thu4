[{"D:\\programming\\2ndStart\\Thursday\\4\\src\\reportWebVitals.ts":"1","D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"2","D:\\programming\\2ndStart\\Thursday\\4\\src\\api\\todolists-api.ts":"3","D:\\programming\\2ndStart\\Thursday\\4\\src\\index.tsx":"4","D:\\programming\\2ndStart\\Thursday\\4\\src\\components\\AddItemForm\\AddItemForm.tsx":"5","D:\\programming\\2ndStart\\Thursday\\4\\src\\utils\\error-utils.ts":"6","D:\\programming\\2ndStart\\Thursday\\4\\src\\app\\App.tsx":"7","D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\Login\\Login.tsx":"8","D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\Login\\authReducer.ts":"9","D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","D:\\programming\\2ndStart\\Thursday\\4\\src\\app\\app-reducer.ts":"11"},{"size":425,"mtime":1649863287693,"results":"12","hashOfConfig":"13"},{"size":4193,"mtime":1649863287944,"results":"14","hashOfConfig":"13"},{"size":3060,"mtime":1650577206944,"results":"15","hashOfConfig":"13"},{"size":752,"mtime":1649932090464,"results":"16","hashOfConfig":"13"},{"size":1595,"mtime":1649863287818,"results":"17","hashOfConfig":"13"},{"size":811,"mtime":1649863287991,"results":"18","hashOfConfig":"13"},{"size":1994,"mtime":1650577268317,"results":"19","hashOfConfig":"13"},{"size":4313,"mtime":1650555392435,"results":"20","hashOfConfig":"13"},{"size":1502,"mtime":1650548072393,"results":"21","hashOfConfig":"13"},{"size":4056,"mtime":1650559789184,"results":"22","hashOfConfig":"13"},{"size":1306,"mtime":1650560730484,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rahpq6",{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\programming\\2ndStart\\Thursday\\4\\src\\reportWebVitals.ts",[],"D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["51","52","53","54","55","56"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["57","58"],"D:\\programming\\2ndStart\\Thursday\\4\\src\\api\\todolists-api.ts",[],"D:\\programming\\2ndStart\\Thursday\\4\\src\\index.tsx",[],"D:\\programming\\2ndStart\\Thursday\\4\\src\\components\\AddItemForm\\AddItemForm.tsx",["59","60","61"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["62","63"],"D:\\programming\\2ndStart\\Thursday\\4\\src\\utils\\error-utils.ts",[],"D:\\programming\\2ndStart\\Thursday\\4\\src\\app\\App.tsx",["64"],"D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\Login\\Login.tsx",["65","66"],"import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from './authReducer';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, useNavigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,8}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = \"Must be more than 4 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        //return  <Navigate to={'/'}/>\r\n        navigate('/')\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            // name={'email'}\r\n                            // onChange={formik.handleChange}\r\n                            // onBlur={formik.handleBlur}\r\n                            // value={formik.values.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {\r\n                            formik.touched.email\r\n                            && formik.errors.email\r\n                            && <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        }\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name={'password'}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.password}\r\n                        />\r\n\r\n                        {\r\n                            formik.touched.password\r\n                            && formik.errors.password\r\n                            && <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        }\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name={'rememberMe'}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'}\r\n                                color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\Login\\authReducer.ts",[],"D:\\programming\\2ndStart\\Thursday\\4\\src\\features\\TodolistsList\\TodolistsList.tsx",["67","68","69","70","71","72","73","74"],"D:\\programming\\2ndStart\\Thursday\\4\\src\\app\\app-reducer.ts",[],{"ruleId":"75","severity":1,"message":"76","line":35,"column":8,"nodeType":"77","endLine":35,"endColumn":10,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":39,"column":8,"nodeType":"77","endLine":39,"endColumn":42,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"79","line":46,"column":8,"nodeType":"77","endLine":46,"endColumn":54,"suggestions":"81"},{"ruleId":"75","severity":1,"message":"79","line":48,"column":95,"nodeType":"77","endLine":48,"endColumn":134,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"79","line":49,"column":101,"nodeType":"77","endLine":49,"endColumn":140,"suggestions":"83"},{"ruleId":"75","severity":1,"message":"79","line":50,"column":107,"nodeType":"77","endLine":50,"endColumn":146,"suggestions":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":9,"nodeType":"91","messageId":"92","endLine":2,"endColumn":12},{"ruleId":"89","severity":1,"message":"93","line":2,"column":14,"nodeType":"91","messageId":"92","endLine":2,"endColumn":20},{"ruleId":"89","severity":1,"message":"94","line":2,"column":22,"nodeType":"91","messageId":"92","endLine":2,"endColumn":33},{"ruleId":"85","replacedBy":"95"},{"ruleId":"87","replacedBy":"96"},{"ruleId":"75","severity":1,"message":"97","line":24,"column":8,"nodeType":"77","endLine":24,"endColumn":10,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":7,"column":9,"nodeType":"91","messageId":"92","endLine":7,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":60,"column":32,"nodeType":"102","endLine":60,"endColumn":49},{"ruleId":"75","severity":1,"message":"103","line":38,"column":8,"nodeType":"77","endLine":38,"endColumn":10,"suggestions":"104"},{"ruleId":"75","severity":1,"message":"105","line":43,"column":8,"nodeType":"77","endLine":43,"endColumn":10,"suggestions":"106"},{"ruleId":"75","severity":1,"message":"105","line":48,"column":8,"nodeType":"77","endLine":48,"endColumn":10,"suggestions":"107"},{"ruleId":"75","severity":1,"message":"105","line":53,"column":8,"nodeType":"77","endLine":53,"endColumn":10,"suggestions":"108"},{"ruleId":"75","severity":1,"message":"105","line":58,"column":8,"nodeType":"77","endLine":58,"endColumn":10,"suggestions":"109"},{"ruleId":"75","severity":1,"message":"105","line":63,"column":8,"nodeType":"77","endLine":63,"endColumn":10,"suggestions":"110"},{"ruleId":"75","severity":1,"message":"105","line":68,"column":8,"nodeType":"77","endLine":68,"endColumn":10,"suggestions":"111"},{"ruleId":"75","severity":1,"message":"105","line":73,"column":8,"nodeType":"77","endLine":73,"endColumn":10,"suggestions":"112"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["113"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["114"],["115"],["116"],["117"],["118"],"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["119"],["120"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["121"],"'Navigate' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["122"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["123"],["124"],["125"],["126"],["127"],["128"],["129"],{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"132","fix":"134"},{"desc":"132","fix":"135"},{"desc":"132","fix":"136"},{"desc":"132","fix":"137"},"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"138","fix":"142"},{"desc":"138","fix":"143"},{"desc":"138","fix":"144"},{"desc":"138","fix":"145"},{"desc":"138","fix":"146"},{"desc":"138","fix":"147"},{"desc":"138","fix":"148"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"149","text":"150"},"Update the dependencies array to be: [props]",{"range":"151","text":"152"},{"range":"153","text":"152"},{"range":"154","text":"152"},{"range":"155","text":"152"},{"range":"156","text":"152"},"Update the dependencies array to be: [dispatch]",{"range":"157","text":"158"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"159","text":"160"},{"range":"161","text":"158"},{"range":"162","text":"158"},{"range":"163","text":"158"},{"range":"164","text":"158"},{"range":"165","text":"158"},{"range":"166","text":"158"},{"range":"167","text":"158"},[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[919,921],"[dispatch]",[1367,1369],"[demo, dispatch, isLoggedIn]",[1538,1540],[1709,1711],[1914,1916],[2127,2129],[2328,2330],[2475,2477],[2654,2656]]